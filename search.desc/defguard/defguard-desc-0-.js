searchState.loadedDescShard("defguard", 0, "Automates test objects creation to easily setup …\nCreate a new VPN location. Meant to be used to automate …\nRuns core web server exposing REST API.\nThis module implements a functionality of disconnecting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate application state\nSends multiple events to be handled by gateway GRPC server\nSends given <code>GatewayEvent</code> to be handled by gateway GRPC …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStandard claims: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVerify JWT and, if successful, convert it to claims.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert claims to JWT.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nInitializes and migrates postgres database. Returns DB …\nCalls <code>U::from(self)</code>.\nOnly <code>id</code> and <code>name</code> from [<code>WebAuthn</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopy fields to <code>User</code>. This function should be used by …\nCopy fields to <code>User</code>. This function is safe to call by a …\nFind by code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate WireGuard config for device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrepare context for rendering welcome messages Available …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFetches a list of VPN locations where a given group is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFind using <code>client_id</code> and <code>client_secret</code>; must be <code>enabled</code>.\nFind client by ’client_id`.\nFind enabled client by <code>client_id</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDelete token from the database.\nFind by access token.\nFind by refresh token.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if token has expired.\nGenerate new access token, scratching the old one. Changes …\nStore data in the database.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all required SMTP options are configured.\nSelect all users without sensitive data.\nReturns a vector of <code>Device</code>s related to a user. If you want …\nDisable email MFA; discard the secret.\nDisable MFA; discard recovery codes, TOTP secret, and …\nDisable TOTP; discard the secret.\nEnable email MFA\nEnable MFA. At least one of the authenticator factors must …\nEnable TOTP\nReturn all members of group\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate MFA code for email verification.\nGet recovery codes. If recovery codes exist, this function …\nCreate admin user if one doesn’t exist yet\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate new email secret, similar to TOTP secret above, …\nGenerate new TOTP secret, save it, then return it as RFC …\nThe user’s sub claim returned by the OpenID provider. …\nRemove authorized apps by their client id’s from user\nStart user enrollment process This creates a new …\nStart user remote desktop configuration process This …\nReturns a vector of <code>UserDevice</code>s (hence the name). …\nCheck if email MFA <code>code</code> is valid.\nVerify the state of mfa flags are correct. Recovers from …\nVerify recovery code. If it is valid, consume it, so it can…\nCheck if TOTP <code>code</code> is valid.\nPrepare challenge message using EIP-712 format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the Keccak-256 hash of input bytes.\nFetch all for a given user.\nDelete all for a given user.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFetch all <code>Passkey</code>s for a given user.\nApp events which triggers webhook action\nUser data send on HWKeyProvision AppEvent\nFetch all enabled webhooks.\nDatabase column name.\nFind <code>WebHook</code> by URL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines datetime aggregation levels\nStores configuration required to setup a WireGuard network\nGenerate network IPs for all existing devices If …\nGenerate network IPs for a device if it’s allowed in …\nTry to change network address, changing device addresses …\nFetch a list of all allowed groups for a given network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtility method to create WireGuard keypair\nReturn a list of allowed groups for a given network. Admin …\nGet a list of all allowed peers\nCheck if devices found in an imported config file exist …\nHandle device -&gt; user mapping in second step of network …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves network stats\nDelete stats older than a configured threshold. This is …\nSet allowed groups, removing or adding groups as necessary.\nRefresh network IPs for all relevant devices If the list …\nTry to set <code>address</code> from <code>&amp;str</code>.\nRetrieves network stats grouped by currently active users …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf license is valid returns current <code>EnterpriseSettings</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nPrepares instance info for polling requests. Enterprise …\nCalls <code>U::from(self)</code>.\nUsed to check if user is allowed to manage his devices.\nGets full information about enterprise status.\nGets basic enterprise status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an error if current session user is not allowed to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the license object from a base64 encoded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the license is past its expiry date (…\nChecks if the license has reached its maximum overdue time.\nCreate the license object based on the license key stored …\nTry to load the license from the database, if the license …\nChecks whether we should try to renew the license.\nChecks how much time has left until the <code>valid_until</code> time.\nGets the time the license is past its expiry date. If the …\nHelper function to update the cached license mutex. The …\nReturns the value of <code>valid_until</code>, or the default value if …\nHelper function used to check if the cached license should …\nUpdate the counts of users, devices, and wireguard …\nAdd Job.\nConnectivity status.\nCreate a new job. Return job id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn first availale Job.\nReturn the first available job.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>Worker</code> instance.\nReturn initial state.\nUpdate connectivity timer.\nReturn <code>true</code> on success.\nRemove a job for a given worker.\nRemove Job with given id.\nBi-directional gRPC stream for comminication with Defguard …\nRuns gRPC server with core services.\nSet worker ip\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturn type needed for knowing if a user came from OpenID …\nDedicated <code>GroupInfo</code> variant for group modification …\nContains the error value\nContains the success value\nTry to fetch [`Device’] if the device.id is of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to fetch <code>User</code> if the username is of the currently …\nAuthentication Request See …\n…\nAuthorization Endpoint See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogin Authorization Endpoint redirect with authorization …\nToken Endpoint …\n…\nAdd device\nDelete device\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet device\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all devices\nList user devices\nModify device\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds user to LDAP.\nLists groups satisfying specified criteria Add user to a …\nDeletes LDAP object with specified distinguished name.\nDeletes user from LDAP.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves user with given username from LDAP. TODO: …\nConstructs group distinguished name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves group with given groupname from LDAP. Modifies …\nModifies LDAP user.\nRemove user from a group.\nChanges user password.\nConstructs user distinguished name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate Windows NT-HASH; used for <code>sambaNTPassword</code>.\nCalculate salted SHA1 hash from given password in SSHA …\nGet first value from distinguished name, for example: cn=,…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds MailHandler and runs it.\nWrapper for secrecy Secret struct which implements sqlx …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDumps all data that could be used for debugging.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun periodic disconnect task")